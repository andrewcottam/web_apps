{"version":3,"sources":["GeojsonLayer.js","GeeLayer.js","WaybackLayer.js","TreeCrownMetrics.js","Helpers.js","UI.js","App.js","reportWebVitals.js","index.js"],"names":["GeojsonLayer","props","state","feature_collection","prevProps","this","map","masks_layer","loadModules","then","GraphicsLayer","Graphic","Polygon","Point","visible","boxes_layer","scores_layer","areas_layer","sub_layers","addMany","forEach","layer","reorder","view","allLayerViews","length","show_boxes","show_masks","show_scores","show_areas","area_range_value","filter","features","score_range_value","feature_property","min","max","visibility","ids","feature","properties","id","graphics","graphic","includes","coordinates","polygon","type","rings","color","outline_transparency","fill_transparency","width","outline_color","concat","fillSymbol","outline","createPolygon","geometry","symbol","createPolygonGraphic","extent","bbox","xmin","ymin","ymax","xmax","text","position","point","xoffset","yoffset","latitude","longitude","textSymbol","haloColor","haloSize","font","size","split","mask","createMaskGraphic","add","createBoundingBoxGraphic","score","createTextGraphic","parseFloat","toFixed","area","parseInt","already_rendered","createAllGraphics","removeAll","fc","removeAllGraphics","hasOwnProperty","addFeaturesAsGraphics","Component","GeeLayer","esriConfig","esriRequest","BaseDynamicLayer","watchUtils","request","trustedServers","push","geeLayer","createSubclass","mapUrl","mapParameters","constructor","whenTrue","e","set_blob","undefined","getImageUrl","height","urlVariables","_prepareQuery","queryString","_joinUrlVariables","queryParameters","replacers","wkid","spatialReference","isWebMercator","_replace","Object","keys","key","reduce","previous","replacerKey","replace","blob","blob_set","fetchImageFromGEE","url","responseType","response","context","drawImage","data","canvas","toBlob","fetchImageDataFromCache","getContext","getImageData","imageToBlackAndWhite","get_black_and_white_image","imgData","y","x","i","avg","putImageData","refresh","fetchImage","document","createElement","service","format","transparent","styles","version","layers","srs","bands","tcd_layer","copyright","WaybackLayer","WebTileLayer","waybackLayer","updating_handler","whenFalse","create_blob","remove","takeScreenshot","alpha","console","error","w","h","urlTemplate","TreeCrownMetrics","histo","Infinity","sort","item","bins","Math","ceil","histogram","Array","fill","floor","bin","count","slider_title","unit","areas","max_value","a","b","marks","value","label","include_histogram","controls","getHistogram","mode","Box","sx","className","FormGroup","FormControlLabel","control","Switch","checked","show_crowns","onChange","changeCrowns","UI","SERVER","GET_INSTANCES_IMAGE_ENDPOINT","GET_INSTANCES_ENDPOINT","image_url","detecting_tree_crowns","getting_dynamic_image","status_text","gee_copyright","wms_copyright","lng","lat","wms_endpoint","handleMapLoad","bind","webMercatorUtils","setState","ul","lr","goTo","center","zoom","_","inputElement","click","raw_image_url","URL","createObjectURL","target","files","selectedFile","processImage","startTCD","FormData","append","axios","post","withCredentials","classified_image_url","instances_image","active_image_is_classified","currentTarget","src","substr","dynamic_image_state","Promise","resolve","reject","xyToLngLat","headers","instances_geojson","file","File","JSON","stringify","link","href","download","name","body","appendChild","removeChild","window","revokeObjectURL","evt","nativeEvent","srcElement","event","ref","input","imageChosen","style","alt","onLoad","imageLoaded","mapProperties","basemap","portalItem","viewProperties","display","fontSize","Button","variant","onClick","openFilePicker","disabled","title","changeToGeeImage","changeToWaybackImage","processDynamicImage","IconButton","downloadInstances","changeBoxes","changeMasks","changeScores","changeAreas","change_area_range","change_score_range","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3432e341.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { loadModules } from 'esri-loader';\n\n//converts an hue/saturation/value value into red/green/blue\n// input: h in [0,360] and s,v in [0,1] - output: r,g,b in [0,1]\n// function hsv2rgb(h, s, v) {\n//     let f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n//     return [f(5) * 255, f(3) * 255, f(1) * 255];\n// }\n\nclass GeojsonLayer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { feature_collection: null };\n    }\n\n    componentDidUpdate(prevProps) {\n        //once the map has loaded, create an instance of the graphics layer and add it to the map\n        if (this.props.map && !this.masks_layer) {\n            //load the ESRI javascript libraries\n            loadModules([\"esri/layers/GraphicsLayer\", 'esri/Graphic', \"esri/geometry/Polygon\", \"esri/geometry/Point\"]).then(([GraphicsLayer, Graphic, Polygon, Point]) => {\n                //create a new graphics layer to add the tree crown masks onto\n                this.masks_layer = new GraphicsLayer({visible: false });\n                //create a new graphics layer to add the tree crown bounding boxes onto\n                this.boxes_layer = new GraphicsLayer({visible: false });\n                //create a new graphics layer to add the tree crown scores onto\n                this.scores_layer = new GraphicsLayer({visible: false });\n                //create a new graphics layer to add the tree crown areas onto\n                this.areas_layer = new GraphicsLayer({visible: false });\n                //create a convenience group of layers\n                this.sub_layers = [this.masks_layer, this.boxes_layer, this.scores_layer, this.areas_layer];\n                //add the layers to the map\n                this.props.map.addMany(this.sub_layers);\n                //save a reference to the Graphic constructor\n                this.Graphic = Graphic;\n                //save a reference to the Polygon constructor\n                this.Polygon = Polygon;\n                //save a reference to the Point constructor\n                this.Point = Point;\n            });\n        }\n        //if the react components visible property has changed, update each of the sub-layers visible property\n        if (this.props.visible !== prevProps.visible) {\n            this.sub_layers.forEach(layer => {layer.visible = this.props.visible});\n            if (this.props.visible){\n                //move the layers to the top - depending on when each class loaded, the graphics layer may not be at the top\n                this.props.map.reorder(this.masks_layer, this.props.view.allLayerViews.length - 1);\n                this.props.map.reorder(this.boxes_layer, this.props.view.allLayerViews.length - 1);\n                this.props.map.reorder(this.scores_layer, this.props.view.allLayerViews.length - 1);\n                this.props.map.reorder(this.areas_layer, this.props.view.allLayerViews.length - 1);\n            }\n        }\n        //filter by layer - look for changes in visibility of the box, mask, score or area individual layers\n        if (this.props.show_boxes !== prevProps.show_boxes) this.boxes_layer.visible = this.props.show_boxes;\n        if (this.props.show_masks !== prevProps.show_masks) this.masks_layer.visible = this.props.show_masks;\n        if (this.props.show_scores !== prevProps.show_scores) this.scores_layer.visible = this.props.show_scores;\n        if (this.props.show_areas !== prevProps.show_areas) this.areas_layer.visible = this.props.show_areas;\n        //filter the features by area if the value has changed\n        if (this.props.area_range_value !== prevProps.area_range_value) {\n            //filter the graphics using area values\n            this.filter(this.features, 'area', this.props.area_range_value[0], this.props.area_range_value[1]);\n        }\n        //filter the features by score if the value has changed\n        if (this.props.score_range_value !== prevProps.score_range_value) {\n            //filter the graphics using score values\n            this.filter(this.features, 'score', this.props.score_range_value[0], this.props.score_range_value[1]);\n        }\n    }\n\n    //filters all graphics by the features property\n    filter(features, feature_property, min, max){\n        // get the ids of the features that are within the range\n        const filtered_features = features.filter(feature => {\n            return (feature.properties[feature_property] >= min && feature.properties[feature_property] <= max);\n        });\n        //get the feature ids to filter on\n        const ids = filtered_features.map(feature => feature.properties.id);\n        //iterate through the layers and set visible to true if the graphic ids are in the ids array\n        var visibility;\n        this.sub_layers.forEach(layer => {\n            //iterate through the graphics\n            layer.graphics.forEach(graphic => {\n                visibility = (ids.includes(graphic.id)) ? true : false;\n                //set the visibility on the graphic\n                graphic.visible = visibility;\n            });\n        });\n    }\n    \n    //creates a polygon geometry from the coordinates\n    createPolygon(coordinates) {\n        const polygon = { type: \"polygon\", rings: coordinates };\n        return new this.Polygon(polygon);\n    }\n\n    //creates a polygon graphic from the coordinates with the passed color, outline transparency, fill transparency and width\n    createPolygonGraphic(feature, coordinates, color, outline_transparency, fill_transparency, width) {\n        //create the outline color for the graphic\n        const outline_color = color.concat([outline_transparency]);\n        //create the fill color for the graphic\n        const fill_color = color.concat([fill_transparency]);\n        //create the fill symbol\n        const fillSymbol = { type: \"simple-fill\", color: fill_color, outline: { color: outline_color, width: width } };\n        //create the polygon from the features geometry\n        const polygon = this.createPolygon(coordinates);\n        //create the graphic from the polygon\n        const graphic = new this.Graphic({id: feature.properties.id, geometry: polygon, symbol: fillSymbol });\n        return graphic;\n    }\n\n    //creates the mask graphic\n    createMaskGraphic(feature, color) {\n        //create the graphic for the polygon with an outline transparency of 0.5, a fill transparency of 0.4 and a width of 0.5\n        const graphic = this.createPolygonGraphic(feature, feature.geometry.coordinates, color, 0.5, 0.3, 0.5);\n        return graphic;\n    }\n\n    //creates the bounding box graphic\n    createBoundingBoxGraphic(feature, color) {\n        //get the polygon\n        const polygon = this.createPolygon(feature.geometry.coordinates);\n        //get the bounding box coordinates\n        const extent = polygon.extent;\n        const bbox = [[extent.xmin, extent.ymin],[extent.xmin, extent.ymax],[extent.xmax, extent.ymax],[extent.xmax, extent.ymin],[extent.xmin, extent.ymin]];\n        //create the graphic for the bounding box with an outline transparency of 0.5, a fill transparency of 0 and a width of 2\n        const graphic = this.createPolygonGraphic(feature, bbox, color, 0.5, 0, 2);\n        return graphic;\n    }\n\n    //creates graphic with a label\n    createTextGraphic(feature, bbox, color, text, position) {\n        //get the extent of the bounding box\n        const extent = bbox.geometry.extent;\n        var point, xoffset, yoffset;\n        switch (position) {\n            case 'ul':\n                //get a point at the top left\n                point = new this.Point({ type: \"point\", latitude: extent.ymax, longitude: extent.xmin });\n                xoffset = 9;\n                yoffset = -7;\n                break;\n            case 'ur':\n                //get a point at the top right\n                point = new this.Point({ type: \"point\", latitude: extent.ymax, longitude: extent.xmax });\n                xoffset = -14;\n                yoffset = -7;\n                break;\n            case 'll':\n                break;\n            case 'lr':\n                break;\n            default:\n                // code\n        }\n        let textSymbol = { type: \"text\", color: color, haloColor: \"black\", haloSize: \"4px\", text: text, xoffset: xoffset, yoffset: yoffset, font: { size: 8 } };\n        const graphic = new this.Graphic({id: feature.properties.id, geometry: point, symbol: textSymbol });\n        return graphic;\n    }\n\n    //creates the graphics from the feature and adds them to the map graphics layer\n    createAllGraphics(feature) {\n        //get the color from the passed color, e.g. '0,255,128' -> [0,255,128]\n        var color = feature.properties.color.split(',');\n        //create the mask graphic\n        const mask = this.createMaskGraphic(feature, color);\n        //add the mask to the masks graphics layer\n        this.masks_layer.add(mask);\n        //create the bounding box graphic\n        const bbox = this.createBoundingBoxGraphic(feature, color);\n        //add the bounding box to the boxes graphics layer\n        this.boxes_layer.add(bbox);\n        //create the score graphic\n        color = [255,255,255];\n        const score = this.createTextGraphic(feature, bbox, color, parseFloat(feature.properties.score.toFixed(2)) + \"%\", 'ul');\n        //add the score to the scores graphics layer\n        this.scores_layer.add(score);\n        //create the area graphic\n        const area = this.createTextGraphic(feature, bbox, color, parseInt(feature.properties.area, 10) + \"m2\", 'ur');\n        //add the score to the scores graphics layer\n        this.areas_layer.add(area);\n    }\n\n    //adds all the features as graphics to the map\n    addFeaturesAsGraphics(features) {\n        //set a local pointer to the features\n        this.features = features;\n        if (!this.already_rendered){\n            //iterate through the features and create all the graphics for each one\n            features.forEach(feature => {\n                this.createAllGraphics(feature);\n            });\n            this.already_rendered = true;\n        }\n    }\n\n    //removes all the graphics\n    removeAllGraphics() {\n        //iterate through the sub-layers and remove the graphics\n        if (this.sub_layers) this.sub_layers.forEach(layer => {layer.removeAll()});\n        this.already_rendered = false;\n    }\n\n    render() {\n        const fc = this.props.feature_collection;\n        //if there are no features but there are graphics then we need to clear the graphics\n        if (!fc || (fc && fc.length === 0)) this.removeAllGraphics();\n        //if there are features with geometries then add them as graphics\n        if (fc && fc.features && fc.features.length > 0 && fc.features[0].hasOwnProperty('geometry') && this.Graphic) this.addFeaturesAsGraphics(fc.features);\n        return (\n            <div/>\n        );\n    }\n}\n\nexport default GeojsonLayer;\n","import { Component } from 'react';\nimport { loadModules } from 'esri-loader';\n\nclass GeeLayer extends Component {\n    componentDidUpdate(prevProps) {\n        //once the map has loaded, create an instance of the geeLayer and add it to the map\n        if (this.props.map && !this.layer) {\n            //load the ESRI javascript libraries and create the class methods\n            loadModules([\"esri/config\", \"esri/request\", \"esri/layers/BaseDynamicLayer\", \"dojo/_base/lang\", \"dojo/io-query\", \"dojo/dom-style\", \"dojo/request\", \"esri/core/watchUtils\"]).then(([esriConfig, esriRequest, BaseDynamicLayer, lang, ioQuery, domStyle, request, watchUtils]) => {\n                //add the server to the trusted servers so that the credentials and cookies are passed to the server\n                esriConfig.request.trustedServers.push(\"https://labs.restor.eco:8081\");\n                esriConfig.request.trustedServers.push(\"https://d50eafb1ad8c430796ecbee59f964ec3.vfs.cloud9.eu-central-1.amazonaws.com:8081\"); //dev server\n                const geeLayer = BaseDynamicLayer.createSubclass({\n                    properties: {\n                        mapUrl: null,\n                        mapParameters: null\n                    },\n                    \n                    //override the constructor to add event handling\n                    constructor: function(props) {\n                        // when the view is stationary\n                        watchUtils.whenTrue(props.view, \"stationary\", (e) => {\n                            //reset the blob data\n                            if (this.visible) this.set_blob(undefined);\n                        });\n                    },\n\n                    // Override the getImageUrl() method to generate URL to an image for a given extent, width, and height.\n                    getImageUrl: function(extent, width, height) {\n                        const urlVariables = this._prepareQuery(this.mapParameters, extent, width, height);\n                        const queryString = this._joinUrlVariables(urlVariables);\n                        return this.mapUrl + \"?\" + queryString;\n                    },\n\n                    // Prepare query parameters for the URL to an image to be generated\n                    _prepareQuery: function(queryParameters, extent, width, height) {\n                        const wkid = extent.spatialReference.isWebMercator ? 3857 : extent.spatialReference.wkid;\n                        const replacers = { width: width, height: height, wkid: wkid, xmin: extent.xmin, xmax: extent.xmax, ymin: extent.ymin, ymax: extent.ymax };\n                        const urlVariables = this._replace({}, queryParameters, replacers);\n                        return urlVariables;\n                    },\n\n                    // replace the url variables with the application provided values\n                    _replace: (urlVariables, queryParameters, replacers) => {\n                        Object.keys(queryParameters).forEach((key) => {\n                            urlVariables[key] = Object.keys(replacers).reduce((previous, replacerKey) => {\n                                    return previous.replace(\"{\" + replacerKey + \"}\", replacers[replacerKey]);\n                                },\n                                queryParameters[key]\n                            );\n                        });\n                        return urlVariables;\n                    },\n\n                    // join the url parameters\n                    _joinUrlVariables: (urlVariables) => {\n                        return Object.keys(urlVariables).reduce((previous, key) => {\n                            return (\n                                previous + (previous ? \"&\" : \"\") + key + \"=\" + urlVariables[key]);\n                        }, \"\");\n                    },\n                    \n                    //save the image data as a blob suitable for sending to the server for tcd\n                    set_blob(blob){\n                        this.blob = blob;\n                        //call the blob_set method - this is a hook for clients to get the value of the blob\n                        if (this.blob_set) this.blob_set(blob);\n                    },\n                    \n                    //makes a request for an image from google earth engine using the url generated from getImageUrl\n                    fetchImageFromGEE: function(extent, width, height) {\n                        let url = this.getImageUrl(extent, width, height);\n                        return esriRequest(url, { responseType: \"image\" }).then((response) => {\n                            //draw the image onto the canvas - the image is an <img> html element that points to the image_url\n                            this.context.drawImage(response.data, 0, 0, width, height);\n                            //save the image data as a blob suitable for sending to the server for tcd\n                            this.canvas.toBlob(blob => {\n                                this.set_blob(blob);\n                            });\n                            return this.canvas;\n                        });\n                    },\n\n                    //returns the image data from the canvas context\n                    fetchImageDataFromCache: function() {\n                        if (this.canvas){\n                            const cnx = this.canvas.getContext(\"2d\");\n                            return cnx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n                        }\n                    },\n\n                    //converts the colour image that is currently on the canvas to a black and white one\n                    imageToBlackAndWhite: function() {\n                        if (this.canvas){\n                            this.get_black_and_white_image = true;\n                            const imgData = this.fetchImageDataFromCache();\n                            for (var y = 0; y < this.canvas.height; y++) {\n                                for (var x = 0; x < this.canvas.width; x++) {\n                                    var i = (y * 4) * this.canvas.width + x * 4;\n                                    var avg = (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3;\n                                    imgData.data[i] = avg;\n                                    imgData.data[i + 1] = avg;\n                                    imgData.data[i + 2] = avg;\n                                }\n                            }\n                            this.canvas.getContext(\"2d\").putImageData(imgData, 0, 0);\n                            //call the fetchImage to refresh the canvas with the new black and white image\n                            this.refresh();\n                        }\n                    },\n\n                    // Fetches images for given extent and size and returns the canvas\n                    fetchImage: function(extent, width, height) {\n                        //create a canvas if it doesnt already exist\n                        if (!this.canvas) {\n                            // create a canvas \n                            this.canvas = document.createElement(\"canvas\");\n                            this.context = this.canvas.getContext(\"2d\");\n                            this.canvas.width = width;\n                            this.canvas.height = height;\n                        }\n                        //if we have already loaded the image from gee then the data is already on the canvas\n                        if (this.get_black_and_white_image) {\n                            return this.canvas;\n                        }\n                        else {\n                            //get the image from google earth engine\n                            return this.fetchImageFromGEE(extent, width, height);\n                        }\n                    },\n\n                });\n                this.layer = new geeLayer({\n                    mapUrl: \"https://google-earth-engine-server-ny43uciwwa-oc.a.run.app/ogc\",\n                    mapParameters: {\n                        service: \"WMS\",\n                        request: \"GetMap\",\n                        format: \"image/png\",\n                        transparent: \"TRUE\",\n                        styles: \"\",\n                        version: \"1.3.0\",\n                        layers: this.props.layers,\n                        width: \"{width}\",\n                        height: \"{height}\",\n                        srs: \"EPSG:{wkid}\",\n                        bbox: \"{xmin},{ymin},{xmax},{ymax}\",\n                        bands: this.props.bands\n                    },\n                    view: this.props.view,\n                    blob_set: this.props.blob_set,\n                    visible: false,\n                    tcd_layer: true,\n                    copyright: this.props.copyright\n                });\n                this.props.map.add(this.layer);\n            });\n        }\n        //if the react components visible property has changed, update the layers visible property\n        if (this.props.visible !== prevProps.visible) this.layer.visible = this.props.visible;\n        //if the tcd has finished, show a black and white image\n        // if ((this.props.detecting_tree_crowns !== prevProps.detecting_tree_crowns) && !this.props.detecting_tree_crowns) this.layer.imageToBlackAndWhite();\n    }\n\n    render() {\n        return (\n            <div/>\n        );\n    }\n}\n\nexport default GeeLayer;\n","import { Component } from 'react';\nimport { loadModules } from 'esri-loader';\n\nclass WaybackLayer extends Component {\n    componentDidUpdate(prevProps) {\n        //once the map has loaded, create an instance of the layer and add it to the map\n        if (this.props.map && !this.layer) {\n            //load the ESRI javascript libraries\n            loadModules([\"esri/layers/WebTileLayer\", \"esri/layers/support/TileInfo\", \"esri/core/watchUtils\"]).then(([WebTileLayer, TileInfo, watchUtils]) => {\n                this.waybackLayer = WebTileLayer.createSubclass({\n                    //override the constructor to add custom attributes\n                    constructor: function(props) {\n                        // when the view is stationary\n                        watchUtils.whenTrue(props.view, \"stationary\", (e) => {\n                            // map has stopped moving - clear the blob \n                            if (this.visible) this.set_blob(undefined);\n                            // when the layer has finished updating (i.e. all the tiles loaded)\n                            this.updating_handler = watchUtils.whenFalse(props.view, \"updating\", (e) => {\n                                //only fire the tiles loaded if the layer is visible\n                                if (this.visible) if (!this.blob) this.create_blob();\n                            });\n                        });\n                        //wire up an event handler that invalidates the blob when the view extent changes and stops listening for network calls\n                        watchUtils.whenFalse(props.view, \"stationary\", (e) => {\n                            if (this.updating_handler) this.updating_handler.remove();\n                        });\n                    },\n\n                    //converts the canvas image data to a blob suitable for sending to the server for tcd\n                    create_blob: function() {\n                        //take a screenshot of the canvas\n                        this.view.takeScreenshot({ layers: [this] }).then(data => {\n                            //check the layer has finished loading the tile data\n                            const alpha = data.data.data[3];\n                            if (alpha !== 255) console.error(\"The tiled layer has not loaded properly before being sent for TCD. Results may be affected. Alpha value of \" + alpha);\n                            //convert the ImageData into a Blob by using a canvas object\n                            const w = data.data.width;\n                            const h = data.data.height;\n                            const canvas = document.createElement(\"canvas\");\n                            canvas.width = w;\n                            canvas.height = h;\n                            const ctx = canvas.getContext(\"2d\");\n                            ctx.putImageData(data.data, 0, 0);\n                            //get the blob\n                            canvas.toBlob(blob => {\n                                this.set_blob(blob);\n                            });\n                        });\n                    },\n                    \n                    //save the image data as a blob suitable for sending to the server for tcd\n                    set_blob(blob){\n                        this.blob = blob;\n                        //call the blob_set method - this is a hook for clients to get the value of the blob\n                        if (this.blob_set) this.blob_set(blob);\n                    },\n                    \n                    //converts the colour image that is currently on the canvas to a black and white one\n                    imageToBlackAndWhite: function() {\n                        this.get_black_and_white_image = true;\n                        const imgData = this.fetchImageDataFromCache();\n                        for (var y = 0; y < this.canvas.height; y++) {\n                            for (var x = 0; x < this.canvas.width; x++) {\n                                var i = (y * 4) * this.canvas.width + x * 4;\n                                var avg = (imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2]) / 3;\n                                imgData.data[i] = avg;\n                                imgData.data[i + 1] = avg;\n                                imgData.data[i + 2] = avg;\n                            }\n                        }\n                        this.canvas.getContext(\"2d\").putImageData(imgData, 0, 0);\n                        //call the fetchImage to refresh the canvas with the new black and white image\n                        this.refresh();\n                    },\n\n                });\n                //try to create the Wayback tileinfo down to level 21\n                // const tileInfo = TileInfo.create({ scales: [591657527.591555, 295828763.7957775, 147914381.89788875, 73957190.94894437, 36978595.47447219, 18489297.737236094, 9244648.868618047, 4622324.434309023, 2311162.2171545117, 1155581.1085772559, 577790.5542886279, 288895.27714431396, 144447.63857215698, 72223.81928607849, 36111.909643039246, 18055.954821519623, 9027.977410759811, 4513.988705379906, 2256.994353, 1128.497176, 564.248588, 282.124294]});\n                //create the scales from 0 to 17 - Wayback does not have images at scales >17 \n                // const tileInfo = TileInfo.create({ scales: [591657527.591555, 295828763.7957775, 147914381.89788875, 73957190.94894437, 36978595.47447219, 18489297.737236094, 9244648.868618047, 4622324.434309023, 2311162.2171545117, 1155581.1085772559, 577790.5542886279, 288895.27714431396, 144447.63857215698, 72223.81928607849, 36111.909643039246, 18055.954821519623, 9027.977410759811, 4513.988705379906]});\n                //instantiate a new wayback layer (this uses only the Wayback 2018-06-06 version)\n                this.layer = new this.waybackLayer({\n                    // tileInfo: tileInfo, //you need to reinstate this if you are getting the imagery from wayback - but it only goes up to 17 for some reason - not sure why\n                    urlTemplate: this.props.urlTemplate,\n                    view: this.props.view,\n                    blob_set: this.props.blob_set,\n                    visible: false,\n                    tcd_layer: true,\n                    copyright: this.props.copyright\n                });\n                //add the layer to the map\n                this.props.map.add(this.layer);\n            });\n        }\n        //if the react components visible property has changed, update the layers visible property\n        if ((this.props.visible !== prevProps.visible) && this.layer) this.layer.visible = this.props.visible;\n    }\n\n    render() {\n        return (\n            <div/>\n        );\n    }\n}\n\nexport default WaybackLayer;\n","import { Component } from 'react';\nimport { BarChart, Bar, XAxis, CartesianGrid, Label, YAxis } from 'recharts';\nimport { AreaChart, Area, LineChart, Line, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { histogram } from \"./Helpers.js\";\nimport Box from '@mui/material/Box';\n// import Checkbox from './Checkbox.js';\n// import Slider from '@mui/material/Slider';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\n\nclass TreeCrownMetrics extends Component {\n\n    //gets a histogram of the tree canopy area data\n    getHistogram(feature_collection) {\n        if (this.props.feature_collection && this.props.feature_collection.features) {\n            const areas = this.props.feature_collection.features.map(feature => {\n                return feature.properties.area;\n            });\n            const histo = histogram(areas);\n            return histo.histogram.map((bin, i) => {\n                return { area: ((i + 1) * histo.size), count: bin };\n            });\n        }\n    }\n\n    //gets the values for the slider based on the data in the feature_property\n    get_slider_values(features, feature_property, slider_title, unit){\n        const areas = features.map(feature => {return feature.properties[feature_property]});\n        const max_value = parseInt(areas.sort(function(a, b){return a-b})[areas.length-1], 10) + 1;\n        const marks = [ {value: 0, label: '0' + unit, }, { value: (max_value / 2), label: slider_title, }, { value: max_value, label: max_value + unit, } ];\n        return({max: max_value, marks: marks});\n    }\n    \n    render() {\n        if (this.props.feature_collection && this.props.feature_collection.features) {\n            //get the min/max values for the area slider and the marks\n            // const area_slider_values = this.get_slider_values(this.props.feature_collection.features, 'area', 'Tree crown area', \"m2\");\n            //get the min/max values for the score slider and the marks\n            // const score_slider_values = this.get_slider_values(this.props.feature_collection.features, 'score', 'Score','');\n            //see if we have area data for the tree crowns\n            const include_histogram = this.props.feature_collection.features.length > 0 && this.props.feature_collection.features[0].hasOwnProperty('properties') && this.props.feature_collection.features[0].properties.hasOwnProperty('area');\n            const tree_crowns = (include_histogram) ? this.getHistogram(this.props.feature_collection) : [];\n            const bar_chart = (include_histogram) ?\n                // <BarChart width={400} height={250} data={tree_crowns} margin={{ top: 5, right: 20, left: 10, bottom: 5 }} >\n                //     <XAxis dataKey=\"area\" type=\"number\" tick={{fontSize: 10}}>\n                //         <Label value=\"Canopy area (m2)\" offset={0} position=\"insideBottom\" style={{ fontSize: 12, fill: 'rgba(0, 0, 0, 0.87)' }}/>\n                //     </XAxis>\n                //     <YAxis tick={{fontSize: 10}}>\n                //         <Label value=\"Count\" angle=\"-90\" style={{ fontSize: 12, fill: 'rgba(0, 0, 0, 0.87)' }}/>\n                //     </YAxis>\n                //     <CartesianGrid stroke=\"#f5f5f5\" />\n                //     <Bar dataKey=\"count\" barSize={10} fill=\"#8884d8\" isAnimationActive={false}/>\n                // </BarChart> \n                // <LineChart width={300} height={100} data={tree_crowns}>\n                //     <Line type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" strokeWidth={1} />\n                //     <Area type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                //     <XAxis dataKey=\"area\" />\n                //     <YAxis dataKey=\"count\" />\n                // </LineChart>\n                // <AreaChart width={300} height={100} data={tree_crowns}>\n                //     <Line type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" strokeWidth={1} />\n                //     <Area type=\"monotone\" dataKey=\"count\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                //     <XAxis dataKey=\"area\" />\n                //     <YAxis dataKey=\"count\" />\n                // </AreaChart>\n                null\n                : null;\n            const controls = (this.props.mode !== 'static_image' && this.props.feature_collection.features.length > 0) ? \n                <Box sx={{ width: 200 }} className='controls_container'>\n                    <FormGroup>\n                        <FormControlLabel control={<Switch checked={this.props.show_crowns} size=\"small\" onChange={this.props.changeCrowns}/>} label=\"\" />\n                    </FormGroup>                                    \n                    {/*<div className='checkbox'>\n                        <Checkbox id='show_crowns_cb' label='Crowns' checked={this.props.show_crowns} size=\"small\" onChange={this.props.changeCrowns}/>  \n                    </div>\n                    <div>\n                        <div className='checkbox_nested'>\n                            <Checkbox id='show_boxes_cb' label='Boxes' checked={this.props.show_boxes} size=\"small\" onChange={this.props.changeBoxes} disabled={!this.props.show_crowns}/>  \n                        </div>\n                        <div className='checkbox_nested'>\n                            <Checkbox id='show_masks_cb' label='Masks' checked={this.props.show_masks} size=\"small\" onChange={this.props.changeMasks} disabled={!this.props.show_crowns}/>  \n                        </div>\n                        <div className='checkbox_nested'>\n                            <Checkbox id='show_scores_cb' label='Scores' checked={this.props.show_scores} size=\"small\" onChange={this.props.changeScores} disabled={!this.props.show_crowns}/>  \n                            <span className='slider_container'>\n                                <Slider value={this.props.score_range_value} onChange={this.props.change_score_range} step={0.01} valueLabelDisplay=\"auto\" size=\"small\" max={1} style={{display: (this.props.show_crowns && this.props.show_scores) ? 'block' : 'none', marginBottom:'0px'}}/>\n                            </span>\n                        </div>\n                        <div className='checkbox_nested'>\n                            <Checkbox id='show_areas_cb' label='Areas' checked={this.props.show_areas} size=\"small\" onChange={this.props.changeAreas} disabled={!this.props.show_crowns}/>  \n                            <span className='slider_container'>\n                                <Slider value={this.props.area_range_value} onChange={this.props.change_area_range} valueLabelDisplay=\"auto\" size=\"small\" max={area_slider_values.max} style={{display: (this.props.show_crowns && this.props.show_areas) ? 'block' : 'none', marginBottom:'0px'}}/>\n                            </span>\n                        </div>\n                    </div>*/}\n                </Box>\n                : null;\n            return (\n                <div className='tree_crown_outer'> \n                    <div className='trees_detected'><div className='trees_detected_count'>{this.props.feature_collection.features.length}</div> trees detected</div>\n                    {bar_chart}\n                    <div className='center'/>\n                    {controls}\n                </div>\n            );\n        }\n        else {\n            return <div/>;\n        }\n    }\n}\n\nexport default TreeCrownMetrics;\n","export function histogram(data) {\n    var min = Infinity, max =-Infinity, size;\n    data.sort();\n    if (data.length === 1) {\n        min = 0;\n        max = data[0];\n        size = 2;\n    }else{\n        if (data.length === 2) {\n            min = data[0];\n            max = data[1];\n            size = (max-min) / 2;\n        }else{\n            size = 25;\n            for (const item of data) {\n                if (item < min) min = item;\n                else if (item > max) max = item;\n            }\n        }\n    }\n    const bins = Math.ceil((max - min + 1) / size);\n    const histogram = new Array(bins).fill(0);\n    for (const item of data) {\n        histogram[Math.floor((item - min) / size)]++;\n    }\n    // console.log(histogram);\n    return {histogram: histogram, size: size};\n}\n\n//from https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_.28JavaScript.2FActionScript.2C_etc..29\n//This code returns the coordinate of the _upper left_ (northwest-most)-point of the tile.\n\nexport function tile2long(x, z) {\n    return (x / Math.pow(2, z) * 360 - 180);\n}\n\nexport function tile2lat(y, z) {\n    var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n    return (180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))));\n}\n","import { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport DownloadIcon from '@mui/icons-material/Download';\n// import Checkbox from '@mui/material/Checkbox';\nimport Sync from '@mui/icons-material/Sync';\nimport {Map } from '@esri/react-arcgis';\nimport {loadModules } from 'esri-loader';\nimport GeojsonLayer from './GeojsonLayer.js'; // to hold the delineated tree crowns\nimport GeeLayer from './GeeLayer.js'; // for the imagery coming from google earth engine\nimport WaybackLayer from './WaybackLayer.js'; // for the imagery coming from esri wayback\nimport TreeCrownMetrics from './TreeCrownMetrics.js';\n\nclass UI extends Component {\n    constructor(props) {\n        super(props);\n        //constants\n        this.SERVER = \"https://tree-detection-server-ny43uciwwa-oc.a.run.app/\"; //by default the tcd server runs on port 8081 to avoid other things on 8080\n        this.GET_INSTANCES_IMAGE_ENDPOINT = this.SERVER + \"/getInstancesImage\";\n        this.GET_INSTANCES_ENDPOINT = this.SERVER + \"/getInstances\";\n        //state\n        this.state = {\n            image_url: null, //bound to the image html element in the ui that shows the instances image or the raw image\n            detecting_tree_crowns: false, //true when waiting for the server to return the TCD results\n            getting_dynamic_image: false, //true when waiting to get either an image from GEE or from a WebTile layer\n            status_text: '',\n            mode: 'static_image',\n            show_crowns: true,\n            show_boxes: true,\n            show_masks: true,\n            show_scores: true,\n            show_areas: true,\n            area_range_value: [0, 800],\n            score_range_value: [0, 800],\n            gee_copyright: '© 2014 WWF Aerial Survey of the Congo. WWF/NASA JPL/KfW/BMUB/BMZ',\n            wms_copyright: 'Imagery from OpenAerialMap. Maxar Products. WorldView2 © 2021 Maxar Technologies.',\n            // lng: 22.624934, lat: -1.781699, wms_endpoint: 'https://wayback.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/WMTS/1.0.0/default028mm/MapServer/tile/8249/{level}/{row}/{col}'\n            // lng: 112.84350452926209, lat: -8.054735059174224, wms_endpoint: 'https://wayback.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/WMTS/1.0.0/default028mm/MapServer/tile/5314/{level}/{row}/{col}',\n            lng: 112.84350452926209, lat: -8.054735059174224, wms_endpoint: 'https://tiles.openaerialmap.org/61b94e69b26de1000596d605/1/61b94e69b26de1000596d607/{z}/{x}/{y}' //java\n        };\n        //connect the map load event to set the state\n        this.handleMapLoad = this.handleMapLoad.bind(this);\n    }\n\n    componentDidMount() {\n        //load the ESRI javascript libraries\n        loadModules([\"esri/core/watchUtils\", \"esri/geometry/support/webMercatorUtils\"]).then(([watchUtils, webMercatorUtils]) => {\n            this.watchUtils = watchUtils;\n            this.webMercatorUtils = webMercatorUtils;\n        });\n    }\n\n    handleMapLoad(map, view) {\n        this.setState({ map, view });\n        this.watchUtils.whenTrue(view, \"stationary\", () => {\n            if (view.extent) {\n                this.ul = [view.extent.xmin, view.extent.ymax];\n                this.lr = [view.extent.xmax, view.extent.ymin];\n            }\n        });\n    }\n\n    changeToGeeImage() {\n        //move the map to the congo\n        this.state.view.goTo({ center: [22.624934, -1.781699], zoom: 19 }).then(_ => {\n            //set the state\n            this.setState({ mode: 'gee_layer', status_text: 'Getting image from Google Earth Engine..', feature_collection: undefined });\n        });\n    }\n\n    changeToWaybackImage() {\n        //move the map to java\n        this.state.view.goTo({ center: [this.state.lng, this.state.lat], zoom: 18 }).then(_ => {\n            //set the state\n            this.setState({ mode: 'webtile_layer', status_text: 'Getting image from OpenAerialMap..', feature_collection: undefined });\n        });\n    }\n\n    startTCD() {\n        this.setState({ detecting_tree_crowns: true, feature_collection: undefined });\n    }\n\n    //static image functions////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //called when the user clicks on the drone button\n    openFilePicker(e) {\n        this.setState({ mode: 'static_image' });\n        this.inputElement.click();\n    }\n\n    //sets the properties of the image that the user has selected for TCD\n    imageChosen(e) {\n        this.raw_image_url = URL.createObjectURL(e.target.files[0]);\n        this.selectedFile = e.target.files[0];\n        //once the state has been set, send the image for processing\n        this.setState({ image_url: this.raw_image_url }, this.processImage);\n    }\n\n    //posts the image data to the server for TCD\n    processImage(response) {\n        this.startTCD();\n        const data = new FormData();\n        //add the image binary data\n        data.append('data', this.selectedFile);\n        //post to the server\n        axios.post(this.GET_INSTANCES_IMAGE_ENDPOINT, data, { withCredentials: true }).then(response => {\n            //get the url to the classified image\n            this.classified_image_url = this.SERVER + \"/outputs/\" + response.data.instances_image;\n            //set the active image is classified to true\n            this.active_image_is_classified = true;\n            //set the url of the <img> element\n            this.setState({ image_url: this.classified_image_url });\n            //set a local variable to the feature collection that will actually be updated when the classified image loads\n            this.fc = response.data.feature_collection;\n        });\n    }\n\n    //called when the image (raw or classified) has been loaded into the html <img> element\n    imageLoaded(e) {\n        //if it is the classified image that has loaded then set the state to finished detecting tree crowns\n        if (e.currentTarget.src.substr(0, 5) !== 'blob:') this.setState({ detecting_tree_crowns: false, feature_collection: this.fc });\n    }\n\n    //change between the raw image and the classified image\n    switchImages() {\n        if (this.active_image_is_classified) {\n            this.setState({ image_url: this.raw_image_url });\n        }\n        else {\n            this.setState({ image_url: this.classified_image_url });\n        }\n        this.active_image_is_classified = !this.active_image_is_classified;\n    }\n\n    //dynamic image functions////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //fired when a dynamic image has been created/cleared and the blob data has been saved in the layer\n    blob_set(blob) {\n        const dynamic_image_state = (blob) ? false : true;\n        //set the state of the getting_dynamic_image\n        this.setState({ getting_dynamic_image: dynamic_image_state });\n        //set the state of the feature collection - if the blob is undefined then clear the feature collection \n        if (!blob) this.setState({ feature_collection: undefined });\n        this.blob = blob;\n    }\n\n    //sends the dynamic image blob to the server to do tcd on it\n    processDynamicImage() {\n        return new Promise((resolve, reject) => {\n            this.startTCD();\n            const data = new FormData();\n            //add the image binary data to the request\n            data.append('data', this.blob);\n            //get the upper right coordinate as a lat/long point\n            const ul = this.webMercatorUtils.xyToLngLat(this.state.view.extent.xmin, this.state.view.extent.ymax);\n            //get the lower left coordinate from the map extent\n            const lr = this.webMercatorUtils.xyToLngLat(this.state.view.extent.xmax, this.state.view.extent.ymin);\n            //add the upper left and lower right coordinates to the request\n            data.append('ul', ul);\n            data.append('lr', lr);\n            //post to the server\n            axios.post(this.GET_INSTANCES_ENDPOINT, data, { withCredentials: true, headers: { 'Content-Type': 'multipart/form-data' } }).then(response => {\n                //set the feature collection - this will draw the tree crowns\n                this.setState({ feature_collection: response.data.instances_geojson, detecting_tree_crowns: false });\n                resolve(response);\n            });\n        });\n    }\n    \n    downloadInstances(){\n        const file = new File([JSON.stringify(this.state.feature_collection)], 'tree_crowns.geojson', {\n          type: 'text/plain',\n        });\n        const link = document.createElement('a');\n        const url = URL.createObjectURL(file);\n        link.href = url;\n        link.download = file.name;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n    }\n\n    //fired when the user clicks on the show crowns checkbox\n    changeCrowns(evt) {\n        this.setState({ show_crowns: evt.nativeEvent.srcElement.checked });\n    }\n\n    //fired when the user clicks on the show boxes checkbox\n    changeBoxes(evt) {\n        this.setState({ show_boxes: evt.nativeEvent.srcElement.checked });\n    }\n\n    //fired when the user clicks on the show masks checkbox\n    changeMasks(evt) {\n        this.setState({ show_masks: evt.nativeEvent.srcElement.checked });\n    }\n\n    //fired when the user clicks on the show scores checkbox\n    changeScores(evt) {\n        this.setState({ show_scores: evt.nativeEvent.srcElement.checked });\n    }\n\n    //fired when the user clicks on the show areas checkbox\n    changeAreas(evt) {\n        this.setState({ show_areas: evt.nativeEvent.srcElement.checked });\n    }\n\n    //fired when the area range sliders value changes\n    change_area_range(evt, value) {\n        this.setState({ area_range_value: value });\n    }\n\n    //fired when the score range sliders value changes\n    change_score_range(evt, value) {\n        this.setState({ score_range_value: value });\n    }\n\n    wms_endpoint_changed(event) {\n        this.setState({ wms_endpoint: event.target.value });\n    }\n    render() {\n        return (\n            <div className=\"maindiv\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <td className={'imageCell'}>\n                                <input ref={input => this.inputElement = input} type=\"file\" onChange={this.imageChosen.bind(this)} style={{'display':'none'}}/>\n                                <img src={this.state.image_url} className={\"image\"} alt='drone' style={{width:\"700px\",height:\"700px\", 'display': (this.state.image_url && this.state.mode === 'static_image') ? 'block' : 'none'}} onLoad={this.imageLoaded.bind(this)}/>\n                                <Map className={'esri_map'} onLoad={this.handleMapLoad} mapProperties={{ basemap: {portalItem: {id: \"96cff8b8e48d45548833f19e29f09943\"}}}} viewProperties={{center: [this.state.lng, this.state.lat], zoom: 19}}>\n                            \t    <GeeLayer detecting_tree_crowns={this.state.detecting_tree_crowns} blob_set={this.blob_set.bind(this)} visible={this.state.mode==='gee_layer'} layers={'WWF/carbon-maps/raw-data/imagery'} bands={\"b1,b2,b3\"} copyright={this.state.gee_copyright}/>\n                            \t    <GeojsonLayer feature_collection={this.state.feature_collection} visible={this.state.mode!=='static_image' && this.state.show_crowns} show_boxes={this.state.show_boxes} show_masks={this.state.show_masks} show_scores={this.state.show_scores} show_areas={this.state.show_areas} area_range_value={this.state.area_range_value} score_range_value={this.state.score_range_value}/>\n                            \t    <WaybackLayer blob_set={this.blob_set.bind(this)} visible={this.state.mode==='webtile_layer'} urlTemplate={this.state.wms_endpoint} copyright={this.state.wms_copyright}/>\n                            \t</Map>\n                                <div className={'imageBackground'}></div>\n                                {/* Detecting trees spinner */}\n                                <div className=\"status_box\" style={{ display: this.state.detecting_tree_crowns ? \"block\": \"none\" }} >\n                                    <Sync sx={{ fontSize: 60 }} className={\"spin\"}/>\n                                    <div className='status_text'>Detecting trees..</div>\n                                    <div className='geeLoading' style={{ 'display': (this.state.mode !== 'static_image' && this.state.getting_dynamic_image) ? 'block' : 'none'}}>{this.state.status_text}</div>\n                                </div>\n                                {/* Loading imagery spinner */}\n                                <div className=\"status_box\" style={{ display: (this.state.mode !== 'static_image' && this.state.getting_dynamic_image) ? \"block\": \"none\" }} >\n                                    <Sync sx={{ fontSize: 60 }} className={\"spin\"} style={{color: 'gray'}}/>\n                                    <div className='geeLoading'>{this.state.status_text}</div>\n                                </div>\n                            </td>\n                            <td className={'buttonCell'}>\n                                <div>\n                    \t            <Button variant=\"contained\" type=\"file\" onClick={this.openFilePicker.bind(this)} disabled={this.state.getting_dynamic_image || this.state.detecting_tree_crowns} title='Upload drone image for tree detection'>Drone</Button>\n                    \t            <span className='span'></span>\n                    \t            <Button variant=\"contained\" onClick={this.changeToGeeImage.bind(this)} disabled={this.state.getting_dynamic_image || this.state.detecting_tree_crowns} title='Use aerial imagery from Google Earth Engine for tree detection'>Aerial</Button>\n                    \t            <span className='span'></span>\n                    \t            <Button variant=\"contained\" onClick={this.changeToWaybackImage.bind(this)} disabled={this.state.getting_dynamic_image || this.state.detecting_tree_crowns} title='Use Maxar WorldView2 imagery for tree detection'>Satelllite</Button>\n                    \t            <span className='span'></span>\n                    \t            <Button variant=\"contained\" onClick={this.processDynamicImage.bind(this)} disabled={this.state.mode==='static_image' || this.state.getting_dynamic_image || this.state.detecting_tree_crowns} color='error' title='Start tree detection on the imagery'>Go</Button>\n                    \t            <span className='span'></span>\n                                    <IconButton aria-label=\"delete\" color=\"primary\" onClick={this.downloadInstances.bind(this)} disabled={!this.state.feature_collection} title='Download the detected trees as Geojson'>\n                                        <DownloadIcon />\n                                    </IconButton>\n                                    <TreeCrownMetrics mode={this.state.mode} feature_collection={this.state.feature_collection} changeCrowns={this.changeCrowns.bind(this)} changeBoxes={this.changeBoxes.bind(this)} changeMasks={this.changeMasks.bind(this)} changeScores={this.changeScores.bind(this)} changeAreas={this.changeAreas.bind(this)} show_crowns={this.state.show_crowns} show_boxes={this.state.show_boxes} show_masks={this.state.show_masks} show_scores={this.state.show_scores} show_areas={this.state.show_areas} change_area_range={this.change_area_range.bind(this)} area_range_value={this.state.area_range_value} score_range_value={this.state.score_range_value} change_score_range={this.change_score_range.bind(this)}/>\n                                    <div className={'citation'}><i>Closed-canopy CNN model source:</i><div>Alejandro Coca-Castro, Matt Allen, 2021 <b>Tree crown detection (The Enviromental AI Book)</b>. http://acocac.github.io/environmental-ai-book/forest/modelling/forest-modelling-treecrown_deepforest.html Online; accessed Mon Nov 01 2021</div></div>\n                                </div>\n                \t        </td>\n                \t   </tr>\n            \t   </tbody>\n            \t</table>\n            </div>\n        );\n    }\n}\n\nexport default UI;\n","import './App.css';\nimport UI from './UI.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UI />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}